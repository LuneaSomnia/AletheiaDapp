type Result = 
 variant {
   err: text;
   ok: nat;
 };
type Rank = 
 variant {
   Associate;
   Expert;
   Junior;
   Master;
   Senior;
   Trainee;
 };
type PerformanceMetrics = 
 record {
   accuracy: float64;
   avgVerificationTime: nat;
   claimsVerified: nat;
   escalationsResolved: nat;
 };
type AletheianId = principal;
type Action = 
 variant {
   AccuracyBonus;
   ComplexityBonus: nat;
   CouncilResolution;
   DuplicateIdentification;
   EscalationReview;
   Mentoring;
   Penalty: nat;
   SpeedBonus;
   SuccessfulVerification;
   TrainingComplete;
 };
service : {
  getPerformance: (aletheianId: AletheianId) ->
   (opt PerformanceMetrics) query;
  getRank: (aletheianId: AletheianId) -> (opt Rank) query;
  getWarnings: (aletheianId: AletheianId) -> (opt nat) query;
  getXP: (aletheianId: AletheianId) -> (opt nat) query;
  initializeAletheian: (aletheianId: AletheianId) -> ();
  updatePerformance: (aletheianId: AletheianId, update:
   variant {
     Accuracy: float64;
     ClaimsVerified: nat;
     EscalationsResolved: nat;
     VerificationTime: nat;
   }) -> ();
  updateXP: (aletheianId: AletheianId, action: Action) -> (Result);
}
