{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst cbor = __importStar(require(\"./value\"));\nconst BufferClasses = [ArrayBuffer, Uint8Array, Uint16Array, Uint32Array, Int8Array, Int16Array, Int32Array, Float32Array, Float64Array];\nclass JsonDefaultCborEncoder {\n  // @param _serializer The CBOR Serializer to use.\n  // @param _stable Whether or not keys from objects should be sorted (stable). This is\n  //     particularly useful when testing encodings between JSON objects.\n  constructor(_serializer, _stable = false) {\n    this._serializer = _serializer;\n    this._stable = _stable;\n    this.name = \"jsonDefault\";\n    this.priority = -100;\n  }\n  match(value) {\n    return [\"undefined\", \"boolean\", \"number\", \"string\", \"object\"].indexOf(typeof value) != -1;\n  }\n  encode(value) {\n    switch (typeof value) {\n      case \"undefined\":\n        return cbor.undefined_();\n      case \"boolean\":\n        return cbor.bool(value);\n      case \"number\":\n        if (Math.floor(value) === value) {\n          return cbor.number(value);\n        } else {\n          return cbor.doubleFloat(value);\n        }\n      case \"string\":\n        return cbor.string(value);\n      case \"object\":\n        if (value === null) {\n          return cbor.null_();\n        } else if (Array.isArray(value)) {\n          return cbor.array(value.map(x => this._serializer.serializeValue(x)));\n        } else if (BufferClasses.find(x => value instanceof x)) {\n          return cbor.bytes(value.buffer);\n        } else if (Object.getOwnPropertyNames(value).indexOf(\"toJSON\") !== -1) {\n          return this.encode(value.toJSON());\n        } else if (value instanceof Map) {\n          const m = new Map();\n          for (const [key, item] of value.entries()) {\n            m.set(key, this._serializer.serializeValue(item));\n          }\n          return cbor.map(m, this._stable);\n        } else {\n          const m = new Map();\n          for (const [key, item] of Object.entries(value)) {\n            m.set(key, this._serializer.serializeValue(item));\n          }\n          return cbor.map(m, this._stable);\n        }\n      default:\n        throw new Error(\"Invalid value.\");\n    }\n  }\n}\nexports.JsonDefaultCborEncoder = JsonDefaultCborEncoder;\nclass ToCborEncoder {\n  constructor() {\n    this.name = \"cborEncoder\";\n    this.priority = -90;\n  }\n  match(value) {\n    return typeof value == \"object\" && typeof value[\"toCBOR\"] == \"function\";\n  }\n  encode(value) {\n    return value.toCBOR();\n  }\n}\nexports.ToCborEncoder = ToCborEncoder;\nclass CborSerializer {\n  constructor() {\n    this._encoders = new Set();\n  }\n  static withDefaultEncoders(stable = false) {\n    const s = new this();\n    s.addEncoder(new JsonDefaultCborEncoder(s, stable));\n    s.addEncoder(new ToCborEncoder());\n    return s;\n  }\n  removeEncoder(name) {\n    // Has to make an extra call to values() to ensure it doesn't break on iteration.\n    for (const encoder of this._encoders.values()) {\n      if (encoder.name == name) {\n        this._encoders.delete(encoder);\n      }\n    }\n  }\n  addEncoder(encoder) {\n    this._encoders.add(encoder);\n  }\n  getEncoderFor(value) {\n    let chosenEncoder = null;\n    for (const encoder of this._encoders) {\n      if (!chosenEncoder || encoder.priority > chosenEncoder.priority) {\n        if (encoder.match(value)) {\n          chosenEncoder = encoder;\n        }\n      }\n    }\n    if (chosenEncoder === null) {\n      throw new Error(\"Could not find an encoder for value.\");\n    }\n    return chosenEncoder;\n  }\n  serializeValue(value) {\n    return this.getEncoderFor(value).encode(value);\n  }\n  serialize(value) {\n    return this.serializeValue(value);\n  }\n}\nexports.CborSerializer = CborSerializer;\nclass SelfDescribeCborSerializer extends CborSerializer {\n  serialize(value) {\n    return cbor.raw(new Uint8Array([\n    // Self describe CBOR.\n    ...new Uint8Array([0xd9, 0xd9, 0xf7]), ...new Uint8Array(super.serializeValue(value))]));\n  }\n}\nexports.SelfDescribeCborSerializer = SelfDescribeCborSerializer;","map":{"version":3,"names":["cbor","__importStar","require","BufferClasses","ArrayBuffer","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","JsonDefaultCborEncoder","constructor","_serializer","_stable","name","priority","match","value","indexOf","encode","undefined_","bool","Math","floor","number","doubleFloat","string","null_","Array","isArray","array","map","x","serializeValue","find","bytes","buffer","Object","getOwnPropertyNames","toJSON","Map","m","key","item","entries","set","Error","exports","ToCborEncoder","toCBOR","CborSerializer","_encoders","Set","withDefaultEncoders","stable","s","addEncoder","removeEncoder","encoder","values","delete","add","getEncoderFor","chosenEncoder","serialize","SelfDescribeCborSerializer","raw"],"sources":["serializer.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}