{"ast":null,"code":"// src/services/learning.ts\nimport { getLearningActor } from './canisters';\nexport const getLearningModules = async () => {\n  // In production: call canister method\n  return [{\n    id: \"module-1\",\n    title: \"Identifying Misinformation\",\n    description: \"Learn to spot common characteristics of false information\",\n    points: 20,\n    completed: true\n  }, {\n    id: \"module-2\",\n    title: \"Source Credibility\",\n    description: \"Evaluate the reliability of information sources\",\n    points: 30,\n    completed: false\n  }, {\n    id: \"module-3\",\n    title: \"Logical Fallacies\",\n    description: \"Recognize common patterns of flawed reasoning\",\n    points: 25,\n    completed: false\n  }];\n};\nexport const getExercise = async exerciseId => {\n  // In production: call canister method\n  return {\n    id: exerciseId,\n    title: \"Spot the Red Flags\",\n    content: `A social media post claims: \"Miracle cure discovered! Doctors hate this one trick for curing COVID! No scientific studies needed because big pharma is hiding the truth!\"`,\n    questions: [{\n      id: \"q1\",\n      text: \"What emotional language is used in this claim?\",\n      options: [\"Miracle cure\", \"Doctors hate this\", \"Big pharma hiding truth\", \"All of the above\"],\n      correctAnswer: 3\n    }, {\n      id: \"q2\",\n      text: \"What is missing from this claim that would make it more credible?\",\n      options: [\"Scientific references\", \"Emotional language\", \"Celebrity endorsement\", \"Exclamation points\"],\n      correctAnswer: 0\n    }]\n  };\n};\nexport const completeExercise = async (exerciseId, answers) => {\n  const actor = await getLearningActor();\n  // In production: await actor.completeExercise(exerciseId, answers);\n  return {\n    success: true,\n    pointsEarned: 15,\n    correctAnswers: answers.length // Mocking all correct\n  };\n};","map":{"version":3,"names":["getLearningActor","getLearningModules","id","title","description","points","completed","getExercise","exerciseId","content","questions","text","options","correctAnswer","completeExercise","answers","actor","success","pointsEarned","correctAnswers","length"],"sources":["C:/Users/pc/Desktop/aletheia-dapp/aletheia-dapp/canisters/frontend/user_interface/src/services/learning.ts"],"sourcesContent":["// src/services/learning.ts\r\nimport { getLearningActor } from './canisters';\r\n\r\nexport const getLearningModules = async () => {\r\n  // In production: call canister method\r\n  return [\r\n    {\r\n      id: \"module-1\",\r\n      title: \"Identifying Misinformation\",\r\n      description: \"Learn to spot common characteristics of false information\",\r\n      points: 20,\r\n      completed: true\r\n    },\r\n    {\r\n      id: \"module-2\",\r\n      title: \"Source Credibility\",\r\n      description: \"Evaluate the reliability of information sources\",\r\n      points: 30,\r\n      completed: false\r\n    },\r\n    {\r\n      id: \"module-3\",\r\n      title: \"Logical Fallacies\",\r\n      description: \"Recognize common patterns of flawed reasoning\",\r\n      points: 25,\r\n      completed: false\r\n    }\r\n  ];\r\n};\r\n\r\nexport const getExercise = async (exerciseId: string) => {\r\n  // In production: call canister method\r\n  return {\r\n    id: exerciseId,\r\n    title: \"Spot the Red Flags\",\r\n    content: `A social media post claims: \"Miracle cure discovered! Doctors hate this one trick for curing COVID! No scientific studies needed because big pharma is hiding the truth!\"`,\r\n    questions: [\r\n      {\r\n        id: \"q1\",\r\n        text: \"What emotional language is used in this claim?\",\r\n        options: [\"Miracle cure\", \"Doctors hate this\", \"Big pharma hiding truth\", \"All of the above\"],\r\n        correctAnswer: 3\r\n      },\r\n      {\r\n        id: \"q2\",\r\n        text: \"What is missing from this claim that would make it more credible?\",\r\n        options: [\"Scientific references\", \"Emotional language\", \"Celebrity endorsement\", \"Exclamation points\"],\r\n        correctAnswer: 0\r\n      }\r\n    ]\r\n  };\r\n};\r\n\r\nexport const completeExercise = async (exerciseId: string, answers: number[]) => {\r\n  const actor = await getLearningActor();\r\n  // In production: await actor.completeExercise(exerciseId, answers);\r\n  return {\r\n    success: true,\r\n    pointsEarned: 15,\r\n    correctAnswers: answers.length // Mocking all correct\r\n  };\r\n};"],"mappings":"AAAA;AACA,SAASA,gBAAgB,QAAQ,aAAa;AAE9C,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C;EACA,OAAO,CACL;IACEC,EAAE,EAAE,UAAU;IACdC,KAAK,EAAE,4BAA4B;IACnCC,WAAW,EAAE,2DAA2D;IACxEC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE;EACb,CAAC,EACD;IACEJ,EAAE,EAAE,UAAU;IACdC,KAAK,EAAE,oBAAoB;IAC3BC,WAAW,EAAE,iDAAiD;IAC9DC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE;EACb,CAAC,EACD;IACEJ,EAAE,EAAE,UAAU;IACdC,KAAK,EAAE,mBAAmB;IAC1BC,WAAW,EAAE,+CAA+C;IAC5DC,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE;EACb,CAAC,CACF;AACH,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAOC,UAAkB,IAAK;EACvD;EACA,OAAO;IACLN,EAAE,EAAEM,UAAU;IACdL,KAAK,EAAE,oBAAoB;IAC3BM,OAAO,EAAE,2KAA2K;IACpLC,SAAS,EAAE,CACT;MACER,EAAE,EAAE,IAAI;MACRS,IAAI,EAAE,gDAAgD;MACtDC,OAAO,EAAE,CAAC,cAAc,EAAE,mBAAmB,EAAE,yBAAyB,EAAE,kBAAkB,CAAC;MAC7FC,aAAa,EAAE;IACjB,CAAC,EACD;MACEX,EAAE,EAAE,IAAI;MACRS,IAAI,EAAE,mEAAmE;MACzEC,OAAO,EAAE,CAAC,uBAAuB,EAAE,oBAAoB,EAAE,uBAAuB,EAAE,oBAAoB,CAAC;MACvGC,aAAa,EAAE;IACjB,CAAC;EAEL,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAON,UAAkB,EAAEO,OAAiB,KAAK;EAC/E,MAAMC,KAAK,GAAG,MAAMhB,gBAAgB,CAAC,CAAC;EACtC;EACA,OAAO;IACLiB,OAAO,EAAE,IAAI;IACbC,YAAY,EAAE,EAAE;IAChBC,cAAc,EAAEJ,OAAO,CAACK,MAAM,CAAC;EACjC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}